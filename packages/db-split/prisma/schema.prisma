// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                     String          @id @default(cuid())
  email                  String          @unique
  phone                  String?         @unique
  name                   String?
  firstName              String?
  middleName             String?
  lastName               String?
  hashedPassword         String?
  image                  String?
  role                   Role            @default(USER)
  disabled               Boolean         @default(false)
  emailVerified          DateTime?       @map("email_verified")
  accounts               Account[]
  sessions               Session[]
  groups                 GroupMember[]
  tempfriends            TempFriend[]
  friends1               Friend[]        @relation("Friend1")
  friends2               Friend[]        @relation("Friend2")
  friendRequestsSent     FriendRequest[] @relation("FriendRequestFrom")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestTo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id      String @id @default(cuid())
  user1Id String
  user1   User   @relation("Friend1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id String
  user2   User   @relation("Friend2", fields: [user2Id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
}

model TempFriend {
  id     String  @id @default(cuid())
  name   String
  email  String
  phone  String?
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, email])
}

model FriendRequest {
  id     String @id @default(cuid())
  fromId String
  from   User   @relation("FriendRequestFrom", fields: [fromId], references: [id], onDelete: Cascade)
  toId   String
  to     User   @relation("FriendRequestTo", fields: [toId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model Group {
  id              String           @id @default(cuid())
  name            String
  color           String
  type            GroupType
  members         GroupMember[]
  expenses        Expense[]
  simplifiedDebts SimplifiedDebt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id                 String           @id @default(cuid())
  name               String
  email              String
  role               GroupRole        @default(MEMBER)
  userId             String?
  user               User?            @relation(fields: [userId], references: [id], onDelete: Restrict)
  groupId            String
  group              Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expensePayments    ExpensePayment[]
  expenseSplits      ExpenseSplit[]
  simplifiedDebtFrom SimplifiedDebt[] @relation("DebtFromUser")
  simplifiedDebtTo   SimplifiedDebt[] @relation("DebtToUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupId, email])
}

model Expense {
  id       String           @id @default(cuid())
  amount   Int
  groupId  String
  group    Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payments ExpensePayment[]
  splits   ExpenseSplit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExpensePayment {
  id            String      @id @default(cuid())
  amount        Int
  expenseId     String
  expense       Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  groupMemberId String
  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id], onDelete: Restrict)
}

model ExpenseSplit {
  id            String      @id @default(cuid())
  amount        Int
  expenseId     String
  expense       Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  groupMemberId String
  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id], onDelete: Restrict)
}

model SimplifiedDebt {
  id      String      @id @default(cuid())
  amount  Int
  groupId String
  group   Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  fromId  String
  from    GroupMember @relation("DebtFromUser", fields: [fromId], references: [id], onDelete: Restrict)
  toId    String
  to      GroupMember @relation("DebtToUser", fields: [toId], references: [id], onDelete: Restrict)
}

enum Role {
  ADMIN
  USER
}

enum GroupRole {
  MANAGER
  MEMBER
}

enum GroupType {
  TRIP
  HOME
  COUPLE
  OTHER
}
