// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ConfirmEmailToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String   @unique
  expires   DateTime
  userEmail String   @unique
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                     String               @id @default(cuid())
  email                  String               @unique
  phone                  String?
  isMerged               Boolean              @default(false)
  name                   String?
  firstName              String?
  middleName             String?
  lastName               String?
  hashedPassword         String?
  image                  String?
  preferredCurrency      CurrencyCode         @default(USD)
  role                   Role                 @default(USER)
  disabled               Boolean              @default(false)
  emailVerified          DateTime?            @map("email_verified")
  confirmEmailToken      ConfirmEmailToken?
  accountVerification    AccountVerification?
  PasswordResetToken     PasswordResetToken?
  accounts               Account[]
  sessions               Session[]
  groups                 GroupMember[]
  tempfriends            TempFriend[]
  createdExpenses        Expense[]            @relation("CreatedBy")
  modifiedExpenses       Expense[]            @relation("LastModifiedBy")
  createdSettlements     Settlement[]         @relation("SettlementCreatedBy")
  modifiedSettlements    Settlement[]         @relation("SettlementLastModifiedBy")
  invites                Invitation[]
  friends1               Friend[]             @relation("Friend1")
  friends2               Friend[]             @relation("Friend2")
  friendRequestsSent     FriendRequest[]      @relation("FriendRequestFrom")
  friendRequestsReceived FriendRequest[]      @relation("FriendRequestTo")
  logs                   Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model AccountVerification {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id      String @id @default(cuid())
  user1Id String
  user1   User   @relation("Friend1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id String
  user2   User   @relation("Friend2", fields: [user2Id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user1Id, user2Id])
}

model TempFriend {
  id     String  @id @default(cuid())
  name   String
  email  String
  phone  String?
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, email])
}

model Invitation {
  id     String @id @default(cuid())
  email  String @unique
  fromId String
  from   User   @relation(fields: [fromId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model FriendRequest {
  id     String @id @default(cuid())
  fromId String
  from   User   @relation("FriendRequestFrom", fields: [fromId], references: [id], onDelete: Cascade)
  toId   String
  to     User   @relation("FriendRequestTo", fields: [toId], references: [id], onDelete: Cascade)
  logs   Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
}

model Group {
  id                   String           @id @default(cuid())
  name                 String
  color                String
  type                 GroupType
  currency             CurrencyCode     @default(USD)
  lastCacluatedDebtsAt DateTime?
  members              GroupMember[]
  expenses             Expense[]
  settlements          Settlement[]
  simplifiedDebts      SimplifiedDebt[]
  logs                 Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id                 String           @id @default(cuid())
  name               String
  email              String
  role               GroupRole        @default(MEMBER)
  isDeleted          Boolean          @default(false)
  groupId            String
  group              Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId             String?
  user               User?            @relation(fields: [userId], references: [id], onDelete: Restrict)
  expensePayments    ExpensePayment[]
  expenseSplits      ExpenseSplit[]
  simplifiedDebtFrom SimplifiedDebt[] @relation("DebtFromUser")
  simplifiedDebtTo   SimplifiedDebt[] @relation("DebtToUser")
  settlementsFrom    Settlement[]     @relation("SettlementFromUser")
  settlementsTo      Settlement[]     @relation("SettlementToUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupId, email])
  @@index([groupId, email])
}

model Expense {
  id               String           @id @default(cuid())
  name             String
  amount           Int
  createdById      String
  createdBy        User             @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  lastModifiedById String
  lastModifiedBy   User             @relation("LastModifiedBy", fields: [lastModifiedById], references: [id], onDelete: Restrict)
  groupId          String
  group            Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payments         ExpensePayment[]
  splits           ExpenseSplit[]
  logs             Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId])
}

model ExpensePayment {
  id            String      @id @default(cuid())
  amount        Int
  expenseId     String
  expense       Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  groupMemberId String
  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id], onDelete: Restrict)
}

model ExpenseSplit {
  id            String      @id @default(cuid())
  amount        Int
  expenseId     String
  expense       Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  groupMemberId String
  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id], onDelete: Restrict)
}

model Settlement {
  id               String      @id @default(cuid())
  amount           Int
  groupId          String
  group            Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdById      String
  createdBy        User        @relation("SettlementCreatedBy", fields: [createdById], references: [id], onDelete: Restrict)
  lastModifiedById String
  lastModifiedBy   User        @relation("SettlementLastModifiedBy", fields: [lastModifiedById], references: [id], onDelete: Restrict)
  fromId           String
  from             GroupMember @relation("SettlementFromUser", fields: [fromId], references: [id], onDelete: Restrict)
  toId             String
  to               GroupMember @relation("SettlementToUser", fields: [toId], references: [id], onDelete: Restrict)
  logs             Log[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId])
}

model SimplifiedDebt {
  id      String      @id @default(cuid())
  amount  Int
  groupId String
  group   Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  fromId  String
  from    GroupMember @relation("DebtFromUser", fields: [fromId], references: [id], onDelete: Restrict)
  toId    String
  to      GroupMember @relation("DebtToUser", fields: [toId], references: [id], onDelete: Restrict)

  @@index([groupId])
}

model Log {
  id              String         @id @default(cuid())
  type            LogType
  message         String
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  groupId         String?
  group           Group?         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expenseId       String?
  expense         Expense?       @relation(fields: [expenseId], references: [id])
  settlementId    String?
  settlement      Settlement?    @relation(fields: [settlementId], references: [id])
  friendRequestId String?
  friendRequest   FriendRequest? @relation(fields: [friendRequestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactForm {
  id      String @id @default(cuid())
  name    String
  email   String
  message String

  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}

enum GroupRole {
  MANAGER
  MEMBER
}

enum GroupType {
  TRIP
  HOME
  COUPLE
  OTHER
}

enum CurrencyCode {
  INR
  USD
  GBP
  EUR
  JPY
  CHF
}

enum LogType {
  USER
  GROUP
  EXPENSE
  SETTLEMENT
  FRIEND_REQUEST
}
